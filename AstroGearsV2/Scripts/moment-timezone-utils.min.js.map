{"version":3,"sources":["moment-timezone-utils.js"],"names":["root","factory","define","amd","module","exports","require","moment","this","packBase60Fraction","fraction","precision","current","buffer","output","Math","floor","EPSILON","BASE60","packBase60","number","absolute","abs","whole","min","packUntils","untils","i","out","last","length","round","join","packAbbrsAndOffsets","source","key","index","abbrs","offsets","indices","map","undefined","packPopulation","exponent","String","pow","validatePackData","name","Error","pack","population","arraysAreEqual","a","b","zonesAreEqual","findAndCreateLinks","input","links","j","group","foundGroup","groups","unshift","push","createLinks","zones","slice","version","sort","findStartAndEndIndex","start","end","untilYear","startI","endI","Date","getUTCFullYear","filterYears","Array","prototype","apply","filterLinkPack","inputZones","outputZones","tz"],"mappings":"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","file":"moment-timezone-utils.min.js","sourcesContent":["//! moment-timezone-utils.js\n//! version : 0.5.3\n//! author : Tim Wood\n//! license : MIT\n//! github.com/moment/moment-timezone\n\n(function (root, factory) {\n\t\"use strict\";\n\n\t/*global define*/\n\tif (typeof define === 'function' && define.amd) {\n\t\tdefine(['moment'], factory);                 // AMD\n\t} else if (typeof module === 'object' && module.exports) {\n\t\tmodule.exports = factory(require('./'));     // Node\n\t} else {\n\t\tfactory(root.moment);                        // Browser\n\t}\n}(this, function (moment) {\n\t\"use strict\";\n\n\tif (!moment.tz) {\n\t\tthrow new Error(\"moment-timezone-utils.js must be loaded after moment-timezone.js\");\n\t}\n\n\t/************************************\n\t\tPack Base 60\n\t************************************/\n\n\tvar BASE60 = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWX',\n\t\tEPSILON = 0.000001; // Used to fix floating point rounding errors\n\n\tfunction packBase60Fraction(fraction, precision) {\n\t\tvar buffer = '.',\n\t\t\toutput = '',\n\t\t\tcurrent;\n\n\t\twhile (precision > 0) {\n\t\t\tprecision  -= 1;\n\t\t\tfraction   *= 60;\n\t\t\tcurrent     = Math.floor(fraction + EPSILON);\n\t\t\tbuffer     += BASE60[current];\n\t\t\tfraction   -= current;\n\n\t\t\t// Only add buffer to output once we have a non-zero value.\n\t\t\t// This makes '.000' output '', and '.100' output '.1'\n\t\t\tif (current) {\n\t\t\t\toutput += buffer;\n\t\t\t\tbuffer  = '';\n\t\t\t}\n\t\t}\n\n\t\treturn output;\n\t}\n\n\tfunction packBase60(number, precision) {\n\t\tvar output = '',\n\t\t\tabsolute = Math.abs(number),\n\t\t\twhole = Math.floor(absolute),\n\t\t\tfraction = packBase60Fraction(absolute - whole, Math.min(~~precision, 10));\n\n\t\twhile (whole > 0) {\n\t\t\toutput = BASE60[whole % 60] + output;\n\t\t\twhole = Math.floor(whole / 60);\n\t\t}\n\n\t\tif (number < 0) {\n\t\t\toutput = '-' + output;\n\t\t}\n\n\t\tif (output && fraction) {\n\t\t\treturn output + fraction;\n\t\t}\n\n\t\tif (!fraction && output === '-') {\n\t\t\treturn '0';\n\t\t}\n\n\t\treturn output || fraction || '0';\n\t}\n\n\t/************************************\n\t\tPack\n\t************************************/\n\n\tfunction packUntils(untils) {\n\t\tvar out = [],\n\t\t\tlast = 0,\n\t\t\ti;\n\n\t\tfor (i = 0; i < untils.length - 1; i++) {\n\t\t\tout[i] = packBase60(Math.round((untils[i] - last) / 1000) / 60, 1);\n\t\t\tlast = untils[i];\n\t\t}\n\n\t\treturn out.join(' ');\n\t}\n\n\tfunction packAbbrsAndOffsets(source) {\n\t\tvar index = 0,\n\t\t\tabbrs = [],\n\t\t\toffsets = [],\n\t\t\tindices = [],\n\t\t\tmap = {},\n\t\t\ti, key;\n\n\t\tfor (i = 0; i < source.abbrs.length; i++) {\n\t\t\tkey = source.abbrs[i] + '|' + source.offsets[i];\n\t\t\tif (map[key] === undefined) {\n\t\t\t\tmap[key] = index;\n\t\t\t\tabbrs[index] = source.abbrs[i];\n\t\t\t\toffsets[index] = packBase60(Math.round(source.offsets[i] * 60) / 60, 1);\n\t\t\t\tindex++;\n\t\t\t}\n\t\t\tindices[i] = packBase60(map[key], 0);\n\t\t}\n\n\t\treturn abbrs.join(' ') + '|' + offsets.join(' ') + '|' + indices.join('');\n\t}\n\n\tfunction packPopulation (number) {\n\t\tif (!number) {\n\t\t\treturn '';\n\t\t}\n\t\tif (number < 1000) {\n\t\t\treturn '|' + number;\n\t\t}\n\t\tvar exponent = String(number | 0).length - 2;\n\t\tvar precision = Math.round(number / Math.pow(10, exponent));\n\t\treturn '|' + precision + 'e' + exponent;\n\t}\n\n\tfunction validatePackData (source) {\n\t\tif (!source.name)    { throw new Error(\"Missing name\"); }\n\t\tif (!source.abbrs)   { throw new Error(\"Missing abbrs\"); }\n\t\tif (!source.untils)  { throw new Error(\"Missing untils\"); }\n\t\tif (!source.offsets) { throw new Error(\"Missing offsets\"); }\n\t\tif (\n\t\t\tsource.offsets.length !== source.untils.length ||\n\t\t\tsource.offsets.length !== source.abbrs.length\n\t\t) {\n\t\t\tthrow new Error(\"Mismatched array lengths\");\n\t\t}\n\t}\n\n\tfunction pack (source) {\n\t\tvalidatePackData(source);\n\t\treturn [\n\t\t\tsource.name,\n\t\t\tpackAbbrsAndOffsets(source),\n\t\t\tpackUntils(source.untils) + packPopulation(source.population)\n\t\t].join('|');\n\t}\n\n\t/************************************\n\t\tCreate Links\n\t************************************/\n\n\tfunction arraysAreEqual(a, b) {\n\t\tvar i;\n\n\t\tif (a.length !== b.length) { return false; }\n\n\t\tfor (i = 0; i < a.length; i++) {\n\t\t\tif (a[i] !== b[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tfunction zonesAreEqual(a, b) {\n\t\treturn arraysAreEqual(a.offsets, b.offsets) && arraysAreEqual(a.abbrs, b.abbrs) && arraysAreEqual(a.untils, b.untils);\n\t}\n\n\tfunction findAndCreateLinks (input, output, links) {\n\t\tvar i, j, a, b, group, foundGroup, groups = [];\n\n\t\tfor (i = 0; i < input.length; i++) {\n\t\t\tfoundGroup = false;\n\t\t\ta = input[i];\n\n\t\t\tfor (j = 0; j < groups.length; j++) {\n\t\t\t\tgroup = groups[j];\n\t\t\t\tb = group[0];\n\t\t\t\tif (zonesAreEqual(a, b)) {\n\t\t\t\t\tif (a.population > b.population) {\n\t\t\t\t\t\tgroup.unshift(a);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgroup.push(a);\n\t\t\t\t\t}\n\t\t\t\t\tfoundGroup = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!foundGroup) {\n\t\t\t\tgroups.push([a]);\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0; i < groups.length; i++) {\n\t\t\tgroup = groups[i];\n\t\t\toutput.push(group[0]);\n\t\t\tfor (j = 1; j < group.length; j++) {\n\t\t\t\tlinks.push(group[0].name + '|' + group[j].name);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction createLinks (source) {\n\t\tvar zones = [],\n\t\t\tlinks = [];\n\n\t\tif (source.links) {\n\t\t\tlinks = source.links.slice();\n\t\t}\n\n\t\tfindAndCreateLinks(source.zones, zones, links);\n\n\t\treturn {\n\t\t\tversion : source.version,\n\t\t\tzones   : zones,\n\t\t\tlinks   : links.sort()\n\t\t};\n\t}\n\n\t/************************************\n\t\tFilter Years\n\t************************************/\n\n\tfunction findStartAndEndIndex (untils, start, end) {\n\t\tvar startI = 0,\n\t\t\tendI = untils.length + 1,\n\t\t\tuntilYear,\n\t\t\ti;\n\n\t\tif (!end) {\n\t\t\tend = start;\n\t\t}\n\n\t\tif (start > end) {\n\t\t\ti = start;\n\t\t\tstart = end;\n\t\t\tend = i;\n\t\t}\n\n\t\tfor (i = 0; i < untils.length; i++) {\n\t\t\tif (untils[i] == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tuntilYear = new Date(untils[i]).getUTCFullYear();\n\t\t\tif (untilYear < start) {\n\t\t\t\tstartI = i + 1;\n\t\t\t}\n\t\t\tif (untilYear > end) {\n\t\t\t\tendI = Math.min(endI, i + 1);\n\t\t\t}\n\t\t}\n\n\t\treturn [startI, endI];\n\t}\n\n\tfunction filterYears (source, start, end) {\n\t\tvar slice     = Array.prototype.slice,\n\t\t\tindices   = findStartAndEndIndex(source.untils, start, end),\n\t\t\tuntils    = slice.apply(source.untils, indices);\n\n\t\tuntils[untils.length - 1] = null;\n\n\t\treturn {\n\t\t\tname       : source.name,\n\t\t\tabbrs      : slice.apply(source.abbrs, indices),\n\t\t\tuntils     : untils,\n\t\t\toffsets    : slice.apply(source.offsets, indices),\n\t\t\tpopulation : source.population\n\t\t};\n\t}\n\n\t/************************************\n\t\tFilter, Link, and Pack\n\t************************************/\n\n\tfunction filterLinkPack (input, start, end) {\n\t\tvar i,\n\t\t\tinputZones = input.zones,\n\t\t\toutputZones = [],\n\t\t\toutput;\n\n\t\tfor (i = 0; i < inputZones.length; i++) {\n\t\t\toutputZones[i] = filterYears(inputZones[i], start, end);\n\t\t}\n\n\t\toutput = createLinks({\n\t\t\tzones : outputZones,\n\t\t\tlinks : input.links.slice(),\n\t\t\tversion : input.version\n\t\t});\n\n\t\tfor (i = 0; i < output.zones.length; i++) {\n\t\t\toutput.zones[i] = pack(output.zones[i]);\n\t\t}\n\n\t\treturn output;\n\t}\n\n\t/************************************\n\t\tExports\n\t************************************/\n\n\tmoment.tz.pack           = pack;\n\tmoment.tz.packBase60     = packBase60;\n\tmoment.tz.createLinks    = createLinks;\n\tmoment.tz.filterYears    = filterYears;\n\tmoment.tz.filterLinkPack = filterLinkPack;\n\n\treturn moment;\n}));\n"],"sourceRoot":"/source/"}