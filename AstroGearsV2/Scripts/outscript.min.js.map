{"version":3,"sources":["outscript.js"],"names":["CommonLibrary","CreateTextLabelList","names","map","name","TextLabel","IsInRange","value","min","max","IsNullOrUndefined","isNaN","intVal","parseInt","val","RandomInteger","Math","floor","random","ConvertSecondsToHoursMinutesSeconds","inSeconds","date","Date","setSeconds","toISOString","substr","Array","prototype","contains","v","i","this","length","JSON","stringify","unique","arr","push","errorIcon","successIcon","coffeeIcon","momentFormat","self","replace","Core","appModule","angular","module","controller","$scope","$filter","enteredChartsListingService","Application","Controllers","EnteredChartsListingController","factory","$http","$location","Services","EnteredChartsListingService","directive","$compile","Directives","AddNewEnteredChartModal","EditEnteredChartModal","http","location","getEnteredChartListing","pageNumber","entriesPerPage","method","url","data","PageNumber","EntriesPerPage","headers","Content-Type","getEnteredChart","id","Id","getChartTypesList","addNewChart","subjectName","subjectLocation","originDateTime","originDateTimeUnknown","chartTypeId","SubjectName","SubjectLocation","OriginDateTime","OriginDateTimeUnknown","ChartTypeId","editChart","enteredChartId","EnteredChartId","createDirective","restrict","scope","modal","link","element","$watch","newstate","children","templateUrl","enteredChartListingService","_this","filter","errorMessage","numberOfPages","totalPages","currentEntriesPerPage","currentPageNumber","enteredChartListing","chartTypeList","listingIsLoading","addingNewChart","editingChart","addNewChartChartType","newChart","ChartType","ChartTypeName","OpenCreateNewChartForm","that","GetChartTypesList","CloseCreateNewChartForm","OpenEditChartForm","GetEnteredChart","CloseEditChartForm","GetEnteredChartsListing","entriesPerPageChanged","then","result","Listing","TotalPages","finally","Chart","OriginDateTimeString","ChartTypes","AddNewChart","Message","catch","ExceptionMessage","ConfirmChartEdit"],"mappings":"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","file":"outscript.min.js","sourcesContent":["var CommonLibrary;\n(function (CommonLibrary) {\n    // prototypes\n    Array.prototype.contains = function (v) {\n        for (var i = 0; i < this.length; i++) {\n            //if (this[i] === v) return true;\n            if (JSON.stringify(this[i]) === JSON.stringify(v))\n                return true;\n        }\n        return false;\n    };\n    Array.prototype.unique = function () {\n        var arr = [];\n        for (var i = 0; i < this.length; i++) {\n            if (!arr.contains(this[i])) {\n                arr.push(this[i]);\n            }\n        }\n        return arr;\n    };\n    // string literals\n    // - error icon\n    CommonLibrary.errorIcon = '<span class=\"fa fa-exclamation-triangle error\"></span>';\n    // - checkmark for success icon\n    CommonLibrary.successIcon = '<span class=\"fa fa-check-circle action-successful\"></span>';\n    // - coffee icon, because who doesn't need coffee?\n    CommonLibrary.coffeeIcon = '<span class=\"fa fa-coffee coffee\"></span>';\n    // - moment string format for date/times.\n    CommonLibrary.momentFormat = \"MM/DD/YYYY HH:mm\";\n    // TextLabel class.\n    var TextLabel = (function () {\n        function TextLabel(name) {\n            var self = this;\n            self.name = name;\n            self.value = name.replace(/\\s/g, '');\n        }\n        return TextLabel;\n    }());\n    CommonLibrary.TextLabel = TextLabel;\n    // creates a list of textlabels\n    function CreateTextLabelList(names) {\n        return names.map(function (name) { return new TextLabel(name); });\n    }\n    CommonLibrary.CreateTextLabelList = CreateTextLabelList;\n    // Checks whether a value is within a numerical range, inclusive.\n    function IsInRange(value, min, max) {\n        // If either min or max is null/undefined, or if min is greater than max, or if the value is \n        // not a number, it is not in range.\n        if ((IsNullOrUndefined(min) || IsNullOrUndefined(max)) || (min > max) || isNaN(value)) {\n            return false;\n        }\n        // parse the integer value.\n        var intVal = parseInt(value);\n        // returns true if the value as an integer is within the range, false otherwise.\n        return ((intVal >= min) === (intVal <= max));\n    }\n    CommonLibrary.IsInRange = IsInRange;\n    // checks whether a given value is null or undefined.\n    function IsNullOrUndefined(val) {\n        return (typeof val === 'undefined' || val === null);\n    }\n    CommonLibrary.IsNullOrUndefined = IsNullOrUndefined;\n    function RandomInteger(min, max) {\n        return Math.floor((Math.random() * max) + min);\n    }\n    CommonLibrary.RandomInteger = RandomInteger;\n    function ConvertSecondsToHoursMinutesSeconds(inSeconds) {\n        var date = new Date(null);\n        date.setSeconds(inSeconds);\n        return date.toISOString().substr(11, 8);\n        //var outSeconds = inSeconds % 60;\n        //var outMinutes = Math.floor(inSeconds / 60) % 60;\n        //var outHours = Math.floor(inSeconds / 3600)\n        //return outHours + \":\" + outMinutes + \":\" + outSeconds;\n    }\n    CommonLibrary.ConvertSecondsToHoursMinutesSeconds = ConvertSecondsToHoursMinutesSeconds;\n})(CommonLibrary || (CommonLibrary = {}));\n\n/// <reference path=\"typings/jquery/jquery.d.ts\" />\n/// <reference path=\"typings/jqueryui/jqueryui.d.ts\" />\n/// <reference path=\"typings/bootstrap/bootstrap.d.ts\" />\n/// <reference path=\"typings/angularjs/angular.d.ts\" />\n/// <reference path=\"typings/angularjs/angular-animate.d.ts\" />\n/// <reference path=\"typings/angular-ui-bootstrap/angular-ui-bootstrap.d.ts\" />\n/// <reference path=\"typings/moment/moment.d.ts\" />\n/// <reference path=\"typings/moment-timezone/moment-timezone.d.ts\" />\n/// <reference path=\"common-library.ts\" />\nvar Core;\n(function (Core) {\n    \"use strict\";\n    // Angular application setup\n    Core.appModule = angular.module(\"astrogears\", [\"ngAnimate\", \"ngSanitize\"]);\n    // setup: Angular controllers\n    Core.appModule.controller(\"enteredChartsListingController\", [\n        \"$scope\", \"$filter\", \"enteredChartsListingService\",\n        function ($scope, $filter, enteredChartsListingService) { return new Core.Application.Controllers\n            .EnteredChartsListingController($scope, $filter, enteredChartsListingService); }\n    ]);\n    // setup: Angular Services\n    Core.appModule.factory(\"enteredChartsListingService\", [\n        \"$http\", \"$location\", function ($http, $location) { return new Core.Application.Services\n            .EnteredChartsListingService($http, $location); }\n    ]);\n    // setup: Angular Directives\n    Core.appModule.directive(\"addNewEnteredChartModal\", [\"$compile\", function ($compile) { return new Core.Application.Directives.AddNewEnteredChartModal($compile); }]);\n    Core.appModule.directive(\"editEnteredChartModal\", [\"$compile\", function ($compile) { return new Core.Application.Directives.EditEnteredChartModal($compile); }]);\n})(Core || (Core = {}));\n\n/*\nCreated by: Jon Russell (jrussell@nodeomega.com)\n*/\nvar Core;\n(function (Core) {\n    \"use strict\";\n    // angular app services.\n    var Application;\n    (function (Application) {\n        var Services;\n        (function (Services) {\n            var EnteredChartsListingService = (function () {\n                function EnteredChartsListingService($http, $location) {\n                    this.http = $http;\n                    this.location = $location;\n                }\n                EnteredChartsListingService.prototype.getEnteredChartListing = function (pageNumber, entriesPerPage) {\n                    return this.http({\n                        method: \"POST\",\n                        url: \"/api/EnteredChartsApi/GetEnteredChartsListing\",\n                        data: {\n                            PageNumber: pageNumber,\n                            EntriesPerPage: entriesPerPage\n                        },\n                        headers: { 'Content-Type': \"application/json\" }\n                    });\n                };\n                EnteredChartsListingService.prototype.getEnteredChart = function (id) {\n                    return this.http({\n                        method: \"POST\",\n                        url: \"/api/EnteredChartsApi/GetEnteredChart\",\n                        data: {\n                            Id: id\n                        },\n                        headers: { 'Content-Type': \"application/json\" }\n                    });\n                };\n                EnteredChartsListingService.prototype.getChartTypesList = function () {\n                    return this.http({\n                        method: \"POST\",\n                        url: \"/api/ChartTypesApi/GetChartTypesList\",\n                        headers: { 'Content-Type': \"application/json\" }\n                    });\n                };\n                EnteredChartsListingService.prototype.addNewChart = function (subjectName, subjectLocation, originDateTime, originDateTimeUnknown, chartTypeId) {\n                    return this.http({\n                        method: \"POST\",\n                        url: \"/api/EnteredChartsApi/AddNewChart\",\n                        data: {\n                            SubjectName: subjectName,\n                            SubjectLocation: subjectLocation,\n                            OriginDateTime: originDateTime,\n                            OriginDateTimeUnknown: originDateTimeUnknown,\n                            ChartTypeId: chartTypeId\n                        },\n                        headers: { 'Content-Type': \"application/json\" }\n                    });\n                };\n                EnteredChartsListingService.prototype.editChart = function (enteredChartId, subjectName, subjectLocation, originDateTime, originDateTimeUnknown, chartTypeId) {\n                    return this.http({\n                        method: \"POST\",\n                        url: \"/api/EnteredChartsApi/EditChart\",\n                        data: {\n                            EnteredChartId: enteredChartId,\n                            SubjectName: subjectName,\n                            SubjectLocation: subjectLocation,\n                            OriginDateTime: originDateTime,\n                            OriginDateTimeUnknown: originDateTimeUnknown,\n                            ChartTypeId: chartTypeId\n                        },\n                        headers: { 'Content-Type': \"application/json\" }\n                    });\n                };\n                return EnteredChartsListingService;\n            }());\n            Services.EnteredChartsListingService = EnteredChartsListingService;\n        })(Services = Application.Services || (Application.Services = {}));\n    })(Application = Core.Application || (Core.Application = {}));\n})(Core || (Core = {}));\n\n/*\nCreated by: Jon Russell (v-jorus)\n*/\nvar Core;\n(function (Core) {\n    \"use strict\";\n    // angular app directives.\n    var Application;\n    (function (Application) {\n        var Directives;\n        (function (Directives) {\n            var AddNewEnteredChartModal = (function () {\n                function AddNewEnteredChartModal($compile) {\n                    return this.createDirective($compile);\n                }\n                AddNewEnteredChartModal.prototype.createDirective = function ($compile) {\n                    return {\n                        restrict: \"E\",\n                        replace: false,\n                        scope: {\n                            modal: \"=modal\"\n                        },\n                        link: function (scope, element) {\n                            scope.$watch('modal', function () {\n                                // any time the data changes, rerender with the fresh data.\n                                //scope.render(scope.modal);\n                                var newstate = scope.modal ? \"show\" : \"hide\";\n                                element.children().modal(newstate);\n                            }, false);\n                        },\n                        templateUrl: \"/DirectiveTemplates/AddNewEnteredChart.html\"\n                    };\n                };\n                return AddNewEnteredChartModal;\n            }());\n            Directives.AddNewEnteredChartModal = AddNewEnteredChartModal;\n        })(Directives = Application.Directives || (Application.Directives = {}));\n    })(Application = Core.Application || (Core.Application = {}));\n    var Application;\n    (function (Application) {\n        var Directives;\n        (function (Directives) {\n            var EditEnteredChartModal = (function () {\n                function EditEnteredChartModal($compile) {\n                    return this.createDirective($compile);\n                }\n                EditEnteredChartModal.prototype.createDirective = function ($compile) {\n                    return {\n                        restrict: \"E\",\n                        replace: false,\n                        scope: {\n                            modal: \"=modal\"\n                        },\n                        link: function (scope, element) {\n                            scope.$watch('modal', function () {\n                                // any time the data changes, rerender with the fresh data.\n                                //scope.render(scope.modal);\n                                var newstate = scope.modal ? \"show\" : \"hide\";\n                                element.children().modal(newstate);\n                            }, false);\n                        },\n                        templateUrl: \"/DirectiveTemplates/EditEnteredChart.html\"\n                    };\n                };\n                return EditEnteredChartModal;\n            }());\n            Directives.EditEnteredChartModal = EditEnteredChartModal;\n        })(Directives = Application.Directives || (Application.Directives = {}));\n    })(Application = Core.Application || (Core.Application = {}));\n})(Core || (Core = {}));\n\n/// <reference path=\"coreservices.ts\" />\n/// <reference path=\"coredirectives.ts\" />\n/// <reference path=\"core.ts\" />\nvar Core;\n(function (Core) {\n    \"use strict\";\n    // controllers for the AngularJS app.\n    var Application;\n    (function (Application) {\n        var Controllers;\n        (function (Controllers) {\n            var EnteredChartsListingController = (function () {\n                function EnteredChartsListingController($scope, $filter, enteredChartListingService) {\n                    var _this = this;\n                    this.scope = $scope;\n                    this.filter = $filter;\n                    this.enteredChartsListingService = enteredChartListingService;\n                    this.data = [];\n                    this.scope.errorMessage = \"\";\n                    this.scope.entriesPerPage = [\n                        { value: 10 },\n                        { value: 25 },\n                        { value: 50 },\n                        { value: 100 },\n                        { value: 250 }\n                    ];\n                    this.scope.numberOfPages = [{ value: 1 }];\n                    this.scope.totalPages = 1;\n                    this.scope.currentEntriesPerPage = this.scope.entriesPerPage[0];\n                    this.scope.currentPageNumber = this.scope.numberOfPages[0];\n                    this.scope.enteredChartListing = [];\n                    this.scope.chartTypeList = [];\n                    this.scope.listingIsLoading = false;\n                    this.scope.addingNewChart = false;\n                    this.scope.editingChart = false;\n                    this.scope.addNewChartChartType = \"\";\n                    this.scope.newChart = {\n                        SubjectName: \"\",\n                        SubjectLocation: \"\",\n                        OriginDateTime: \"\",\n                        OriginDateTimeUnknown: false,\n                        ChartType: { ChartTypeId: 0, ChartTypeName: \"NULL\" }\n                    };\n                    this.scope.editChart = {\n                        EnteredChartId: 0,\n                        SubjectName: \"\",\n                        SubjectLocation: \"\",\n                        OriginDateTime: \"\",\n                        OriginDateTimeUnknown: false,\n                        ChartType: { ChartTypeId: 0, ChartTypeName: \"NULL\" }\n                    };\n                    //this.scope.SetUserId = ((id: any) => {\n                    //    this.scope.userId = id;\n                    //});\n                    this.scope.OpenCreateNewChartForm = (function () {\n                        var that = _this;\n                        that.scope.addingNewChart = true;\n                        that.scope.GetChartTypesList();\n                        that.scope.addNewChart.ChartType = that.scope.chartTypeList[0];\n                    });\n                    this.scope.CloseCreateNewChartForm = (function () {\n                        var that = _this;\n                        that.scope.addingNewChart = false;\n                    });\n                    this.scope.OpenEditChartForm = (function (id) {\n                        var that = _this;\n                        that.scope.editingChart = true;\n                        that.scope.GetChartTypesList();\n                        that.scope.GetEnteredChart(id);\n                    });\n                    this.scope.CloseEditChartForm = (function () {\n                        var that = _this;\n                        that.scope.editingChart = false;\n                    });\n                    this.scope.GetEnteredChartsListing = (function (entriesPerPageChanged) {\n                        var that = _this;\n                        that.scope.listingIsLoading = true;\n                        if (entriesPerPageChanged)\n                            that.scope.currentPageNumber = { value: 1 };\n                        that.enteredChartsListingService\n                            .getEnteredChartListing(that.scope.currentPageNumber.value, that.scope.currentEntriesPerPage.value)\n                            .then(function (result) {\n                            that.scope.enteredChartListing = result.data.Listing;\n                            if (entriesPerPageChanged) {\n                                that.scope.numberOfPages = [{ value: 1 }];\n                                for (var i = 2; i <= result.data.TotalPages; i++) {\n                                    that.scope.numberOfPages.push({ value: i });\n                                }\n                                that.scope.totalPages = result.data.TotalPages;\n                            }\n                        })\n                            .finally(function () {\n                            that.scope.listingIsLoading = false;\n                            that.scope.entriesPerPageChanged = false;\n                        });\n                    });\n                    this.scope.GetEnteredChart = (function (id) {\n                        var that = _this;\n                        that.enteredChartsListingService.getEnteredChart(id)\n                            .then(function (result) {\n                            that.scope.editChart = {\n                                EnteredChartId: result.data.Chart.EnteredChartId,\n                                SubjectName: result.data.Chart.SubjectName,\n                                SubjectLocation: result.data.Chart.SubjectLocation,\n                                OriginDateTime: result.data.Chart.OriginDateTimeString,\n                                OriginDateTimeUnknown: result.data.Chart.OriginDateTimeUnknown,\n                                ChartType: {\n                                    ChartTypeId: result.data.Chart.ChartTypeId,\n                                    ChartTypeName: result.data.Chart.ChartTypeName\n                                }\n                            };\n                        });\n                    });\n                    this.scope.GetChartTypesList = (function () {\n                        var that = _this;\n                        if (that.scope.chartTypeList.length === 0) {\n                            that.enteredChartsListingService.getChartTypesList()\n                                .then(function (result) {\n                                that.scope.chartTypeList = result.data.ChartTypes;\n                            });\n                        }\n                    });\n                    this.scope.AddNewChart = (function () {\n                        var that = _this;\n                        that.enteredChartsListingService\n                            .addNewChart(that.scope.newChart.SubjectName, that.scope.newChart.SubjectLocation, that.scope.newChart.OriginDateTime, that.scope.newChart.OriginDateTimeUnknown, that.scope.newChart.ChartType.ChartTypeId)\n                            .then(function (result) {\n                            that.scope.errorMessage = CommonLibrary.successIcon + \" \" + result.data.Message;\n                            that.scope.GetEnteredChartsListing(false);\n                        })\n                            .catch(function (result) {\n                            that.scope.errorMessage = CommonLibrary.errorIcon + \" \" + result.data.ExceptionMessage;\n                        })\n                            .finally(function () {\n                            _this.scope.newChart = {\n                                SubjectName: \"\",\n                                SubjectLocation: \"\",\n                                OriginDateTime: \"\",\n                                OriginDateTimeUnknown: false,\n                                ChartType: { ChartTypeId: 0, ChartTypeName: \"NULL\" }\n                            };\n                            that.scope.addingNewChart = false;\n                        });\n                    });\n                    this.scope.ConfirmChartEdit = (function () {\n                        var that = _this;\n                        that.enteredChartsListingService\n                            .editChart(that.scope.newChart.EnteredChartId, that.scope.newChart.SubjectName, that.scope.newChart.SubjectLocation, that.scope.newChart.OriginDateTime, that.scope.newChart.OriginDateTimeUnknown, that.scope.newChart.ChartType.ChartTypeId)\n                            .then(function (result) {\n                            that.scope.errorMessage = CommonLibrary.successIcon + \" \" + result.data.Message;\n                            that.scope.GetEnteredChartsListing(false);\n                        })\n                            .catch(function (result) {\n                            that.scope.errorMessage = CommonLibrary.errorIcon + \" \" + result.data.ExceptionMessage;\n                        })\n                            .finally(function () {\n                            _this.scope.editChart = {\n                                EnteredChartId: 0,\n                                SubjectName: \"\",\n                                SubjectLocation: \"\",\n                                OriginDateTime: \"\",\n                                OriginDateTimeUnknown: false,\n                                ChartType: { ChartTypeId: 0, ChartTypeName: \"NULL\" }\n                            };\n                            that.scope.addingNewChart = false;\n                        });\n                    });\n                }\n                return EnteredChartsListingController;\n            }());\n            Controllers.EnteredChartsListingController = EnteredChartsListingController;\n        })(Controllers = Application.Controllers || (Application.Controllers = {}));\n    })(Application = Core.Application || (Core.Application = {}));\n})(Core || (Core = {}));\n\n//# sourceMappingURL=data:application/json;base64,\n"],"sourceRoot":"/source/"}